@page "/model-data"
@inherits MvvmComponentBase<ModelDataViewModel>

@using System.Net.Http.Json
@using ValueType = Anndotnet.App.Models.ColValueType

<style type="text/css">
    .mud-table-head .header-centered th {
        text-align: center;
        font-size: 1.2em;
    }

    .mud-table-foot .bold-text .mud-table-cell {
        font-weight: 500;
    }


    .right-align {
        text-align: right; /* This will right-align the content in the column */
    }

    .center-align {
        text-align: center; /* This will right-align the content in the column */
    }

    /* YourComponent.razor.css or a global CSS file */
    .cell-grey-bcgrd {
        background-color: #CCCCCC; /* Set your custom background color */
        /* Redefine any other custom styles here, keeping the default styles */
        
    }    
</style>

<h3>ModelData</h3>

@if (ViewModel.DataFrame == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{

    <MudTable Items="@ViewModel.DataFrame.GetRowEnumerator()"
              Dense="true" MultiSelection="false" Hover="true" Breakpoint="Breakpoint.Sm" Striped="true" Bordered="true" Outlined="true"
              CustomHeader="true" CustomFooter="true" HeaderClass="table-head-bordered" FooterClass="table-foot-bordered">
        <ColGroup>
            <col style="width: 150px;"/>

            @foreach (var col in ViewModel.MetaData)
            {
                <col style="width: 250px;"/>
            }
            
        </ColGroup>
        <HeaderContent>

            <MudTHeadRow IsCheckable="false">
                <MudTh Class="cell-grey-bcgrd">Columns:</MudTh>

                @foreach (var col in ViewModel.MetaData)
                {
                    <MudTh Class="center-align cell-grey-bcgrd">@col.Title</MudTh>
                }

            </MudTHeadRow>

            <MudTHeadRow IsCheckable="true">
                <MudTh Style="width: 250px;" Class="cell-grey-bcgrd">Column Type:</MudTh>
                @foreach (var col in ViewModel.MetaData)
                {
                    <MudTh Class="right-align"> @col.ValueType

                        <MudMenu Icon="@Icons.Material.Filled.Settings" Color="Color.Primary">
                            @foreach (ValueType vType in Enum.GetValues(typeof(ValueType)))
                            {
                                <MudMenuItem OnClick="() => ViewModel.OnColumnTypeChanged(col, vType)">@vType</MudMenuItem>
                            }
                        </MudMenu>
                    </MudTh>
                }

            </MudTHeadRow>
            <MudTHeadRow IsCheckable="true">
                <MudTh Class="cell-grey-bcgrd">ML Type:</MudTh>
                @foreach (var col in ViewModel.MetaData)
                {
                    <MudTh Class="right-align"> @col.MlDataType

                        <MudMenu Size="Size.Small" Icon="@Icons.Material.Filled.Settings" Color="Color.Primary">
                            @foreach (ColMlDataType mlType in Enum.GetValues(typeof(ColMlDataType)))
                            {
                                <MudMenuItem OnClick="() => ViewModel.OnMlDataTypeChanged(col, mlType)">@mlType</MudMenuItem>
                            }
                        </MudMenu>
                    </MudTh>
                }

            </MudTHeadRow>
            <MudTHeadRow IsCheckable="true">
                <MudTh Class="cell-grey-bcgrd">Missing Value</MudTh>
                @foreach (var col in ViewModel.MetaData)
                {
                    <MudTh Class="right-align">
                        @col.MissingValue

                        <MudMenu Size="Size.Small" Icon="@Icons.Material.Filled.Settings" Color="Color.Primary">
                            @foreach (ColMissingValue missValue in Enum.GetValues(typeof(ColMissingValue)))
                            {
                                <MudMenuItem OnClick="() => ViewModel.OnMissingValueChanged(col, missValue)">@missValue</MudMenuItem>
                            }
                        </MudMenu>
                    </MudTh>
                }

            </MudTHeadRow>
        </HeaderContent>
        <RowTemplate>

            <MudTd DataLabel="Nr" Class="cell-grey-bcgrd">"-"</MudTd>
            @for (int i=0; i < ViewModel.MetaData.Count; i++)
            {
                <MudTd DataLabel="Nr">ViewModel.DataFrame[i]</MudTd>
            }

        </RowTemplate>

        <FooterContent>
            <MudTFootRow Class="center-align">

                <MudTh Class="cell-grey-bcgrd">...</MudTh>
                @foreach (var col in ViewModel.MetaData)
                {
                    <MudTh> ... </MudTh>
                }
            </MudTFootRow>


            <MudTFootRow >
                <MudTh Class="cell-grey-bcgrd">Rows:</MudTh>
                @foreach (var col in ViewModel.MetaData)
                {
                    <MudTh> 0 </MudTh>
                }

            </MudTFootRow>

            <MudTFootRow >
                <MudTh Class="cell-grey-bcgrd">Distinct</MudTh>

                @foreach (var col in ViewModel.MetaData)
                {
                    <MudTh> 0 </MudTh>
                }
            </MudTFootRow>

        </FooterContent>
    </MudTable>
}
@code 
{

   

    protected override async Task OnInitializedAsync()
    {
       
         await Task.CompletedTask;
    }   

   

    
}

